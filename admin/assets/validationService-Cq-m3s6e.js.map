{"version":3,"file":"validationService-Cq-m3s6e.js","sources":["../../src/services/validationService.ts"],"sourcesContent":["import { phone } from \"phone\";\r\n\r\nconst validateData = (data: string, validationType: string, country = \"US\") => {\r\n  const regPhone = /^\\+?\\d{5,17}$/g;\r\n  const regNumber = /^\\d+$/;\r\n  const regDomain = /^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{1,63}(?<!-)$/;\r\n  const regEmail = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,3}))$/;\r\n  const regUsername = /^[a-zA-Z0-9._!@#$%^&*-]{3,}/g; //3-30 characters limit\r\n  const regName = /^[A-Za-z\\s]{2,40}$/; //accept only a-z,A-Z not any special characters either start(^) or end($)\r\n  const regPassword = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*-])(?=.{8,})/g;\r\n  // const regCompany = /^(\\w+\\s?)*\\w{3,75}$/;\r\n  const regCompany = /^[a-zA-Z0-9\\s-?]{3,75}$/;\r\n  const regTimer = /^[0-9]+$/g;\r\n  const regCharacters = /[a-zA-Z0-9\\s!@#$%^&*()[_\\-~`=+'\\[\\]\";:\\|?,<.>\" \"]/gi;\r\n  const regWords = /\\S+/g;\r\n  const regUrlParam = /^[-a-zA-Z0-9@:%._+~#=]{1,2048}$/; //accept only a-z,A-Z and numbers not any special characters either start(^) or end($)\r\n  const regUrl = /^https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,30}\\b(?:[-a-zA-Z0-9()@:%_\\+.~#?&\\/=]*)$/;\r\n  const regHex = /^#[0-9A-F]{6}$/i;\r\n\r\n  switch (validationType) {\r\n    case \"name\":\r\n      data = data.trim().replace(/\\s\\s/g, \" \");\r\n      if (regName.test(data)) return true;\r\n      break;\r\n    case \"number\":\r\n      if (regNumber.test(data)) return true;\r\n      break;\r\n    case \"email\":\r\n      if (regEmail.test(data.toLowerCase())) return true;\r\n      break;\r\n    case \"password\":\r\n      if (regPassword.test(data)) return true;\r\n      break;\r\n    case \"username\":\r\n      if (regUsername.test(data)) return true;\r\n      break;\r\n    case \"company\":\r\n      if (regCompany.test(data)) return true;\r\n      break;\r\n    case \"domain\":\r\n      if(regDomain.test(data)) return true;\r\n      break;  \r\n    case \"phone\":\r\n      if (regPhone.test(data.replace(/ /g, \"\"))) return true;\r\n      // if (phone(data, { country }).isValid) return true  ;\r\n      break;\r\n    case \"address\":\r\n      if (data !== \"\") return true;\r\n      break;\r\n    case \"timer\":\r\n      if (regTimer.test(data)) return true;\r\n      break;\r\n    case \"urlParam\":\r\n      if (regUrlParam.test(data)) return true;\r\n      break;\r\n    case \"url\":\r\n      if (regUrl.test(data)) return true;\r\n      break;\r\n    case \"colorHex\":\r\n      if (regHex.test(data)) return true;\r\n  }\r\n  return false;\r\n};\r\nexport default validateData;\r\n"],"names":["validateData","data","validationType","country","regPhone","regNumber","regDomain","regEmail","regUsername","regName","regPassword","regCompany","regTimer","regUrlParam","regUrl","regHex"],"mappings":"AAEA,MAAMA,EAAe,CAACC,EAAcC,EAAwBC,EAAU,OAAS,CAC7E,MAAMC,EAAW,iBACXC,EAAY,QACZC,EAAY,WAAA,4CAAA,EACZC,EAAW,6JACXC,EAAc,+BACdC,EAAU,qBACVC,EAAc,gEAEdC,EAAa,0BACbC,EAAW,YAGXC,EAAc,kCACdC,EAAS,+GACTC,EAAS,kBAEf,OAAQb,EAAgB,CACtB,IAAK,OAEC,GADJD,EAAOA,EAAK,KAAA,EAAO,QAAQ,QAAS,GAAG,EACnCQ,EAAQ,KAAKR,CAAI,EAAU,MAAA,GAC/B,MACF,IAAK,SACC,GAAAI,EAAU,KAAKJ,CAAI,EAAU,MAAA,GACjC,MACF,IAAK,QACH,GAAIM,EAAS,KAAKN,EAAK,YAAA,CAAa,EAAU,MAAA,GAC9C,MACF,IAAK,WACC,GAAAS,EAAY,KAAKT,CAAI,EAAU,MAAA,GACnC,MACF,IAAK,WACC,GAAAO,EAAY,KAAKP,CAAI,EAAU,MAAA,GACnC,MACF,IAAK,UACC,GAAAU,EAAW,KAAKV,CAAI,EAAU,MAAA,GAClC,MACF,IAAK,SACA,GAAAK,EAAU,KAAKL,CAAI,EAAU,MAAA,GAChC,MACF,IAAK,QACH,GAAIG,EAAS,KAAKH,EAAK,QAAQ,KAAM,EAAE,CAAC,EAAU,MAAA,GAElD,MACF,IAAK,UACH,GAAIA,IAAS,GAAW,MAAA,GACxB,MACF,IAAK,QACC,GAAAW,EAAS,KAAKX,CAAI,EAAU,MAAA,GAChC,MACF,IAAK,WACC,GAAAY,EAAY,KAAKZ,CAAI,EAAU,MAAA,GACnC,MACF,IAAK,MACC,GAAAa,EAAO,KAAKb,CAAI,EAAU,MAAA,GAC9B,MACF,IAAK,WACC,GAAAc,EAAO,KAAKd,CAAI,EAAU,MAAA,EAClC,CACO,MAAA,EACT"}