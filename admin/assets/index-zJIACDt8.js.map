{"version":3,"file":"index-zJIACDt8.js","sources":["../../node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs","../../node_modules/framer-motion/dist/es/utils/use-force-update.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/PopChild.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs","../../node_modules/framer-motion/dist/es/utils/use-unmount-effect.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs"],"sourcesContent":["import { useRef } from 'react';\nimport { useIsomorphicLayoutEffect } from './use-isomorphic-effect.mjs';\n\nfunction useIsMounted() {\n    const isMounted = useRef(false);\n    useIsomorphicLayoutEffect(() => {\n        isMounted.current = true;\n        return () => {\n            isMounted.current = false;\n        };\n    }, []);\n    return isMounted;\n}\n\nexport { useIsMounted };\n","import { useState, useCallback } from 'react';\nimport { useIsMounted } from './use-is-mounted.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction useForceUpdate() {\n    const isMounted = useIsMounted();\n    const [forcedRenderCount, setForcedRenderCount] = useState(0);\n    const forceRender = useCallback(() => {\n        isMounted.current && setForcedRenderCount(forcedRenderCount + 1);\n    }, [forcedRenderCount]);\n    /**\n     * Defer this to the end of the next animation frame in case there are multiple\n     * synchronous calls.\n     */\n    const deferredForceRender = useCallback(() => frame.postRender(forceRender), [forceRender]);\n    return [deferredForceRender, forcedRenderCount];\n}\n\nexport { useForceUpdate };\n","import { jsx } from 'react/jsx-runtime';\nimport * as React from 'react';\nimport { useId, useRef, useContext, useInsertionEffect } from 'react';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\n\n/**\n * Measurement functionality has to be within a separate component\n * to leverage snapshot lifecycle.\n */\nclass PopChildMeasure extends React.Component {\n    getSnapshotBeforeUpdate(prevProps) {\n        const element = this.props.childRef.current;\n        if (element && prevProps.isPresent && !this.props.isPresent) {\n            const size = this.props.sizeRef.current;\n            size.height = element.offsetHeight || 0;\n            size.width = element.offsetWidth || 0;\n            size.top = element.offsetTop;\n            size.left = element.offsetLeft;\n        }\n        return null;\n    }\n    /**\n     * Required with getSnapshotBeforeUpdate to stop React complaining.\n     */\n    componentDidUpdate() { }\n    render() {\n        return this.props.children;\n    }\n}\nfunction PopChild({ children, isPresent }) {\n    const id = useId();\n    const ref = useRef(null);\n    const size = useRef({\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0,\n    });\n    const { nonce } = useContext(MotionConfigContext);\n    /**\n     * We create and inject a style block so we can apply this explicit\n     * sizing in a non-destructive manner by just deleting the style block.\n     *\n     * We can't apply size via render as the measurement happens\n     * in getSnapshotBeforeUpdate (post-render), likewise if we apply the\n     * styles directly on the DOM node, we might be overwriting\n     * styles set via the style prop.\n     */\n    useInsertionEffect(() => {\n        const { width, height, top, left } = size.current;\n        if (isPresent || !ref.current || !width || !height)\n            return;\n        ref.current.dataset.motionPopId = id;\n        const style = document.createElement(\"style\");\n        if (nonce)\n            style.nonce = nonce;\n        document.head.appendChild(style);\n        if (style.sheet) {\n            style.sheet.insertRule(`\n          [data-motion-pop-id=\"${id}\"] {\n            position: absolute !important;\n            width: ${width}px !important;\n            height: ${height}px !important;\n            top: ${top}px !important;\n            left: ${left}px !important;\n          }\n        `);\n        }\n        return () => {\n            document.head.removeChild(style);\n        };\n    }, [isPresent]);\n    return (jsx(PopChildMeasure, { isPresent: isPresent, childRef: ref, sizeRef: size, children: React.cloneElement(children, { ref }) }));\n}\n\nexport { PopChild };\n","import { jsx } from 'react/jsx-runtime';\nimport * as React from 'react';\nimport { useId, useMemo } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { PopChild } from './PopChild.mjs';\n\nconst PresenceChild = ({ children, initial, isPresent, onExitComplete, custom, presenceAffectsLayout, mode, }) => {\n    const presenceChildren = useConstant(newChildrenMap);\n    const id = useId();\n    const context = useMemo(() => ({\n        id,\n        initial,\n        isPresent,\n        custom,\n        onExitComplete: (childId) => {\n            presenceChildren.set(childId, true);\n            for (const isComplete of presenceChildren.values()) {\n                if (!isComplete)\n                    return; // can stop searching when any is incomplete\n            }\n            onExitComplete && onExitComplete();\n        },\n        register: (childId) => {\n            presenceChildren.set(childId, false);\n            return () => presenceChildren.delete(childId);\n        },\n    }), \n    /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */\n    presenceAffectsLayout ? [Math.random()] : [isPresent]);\n    useMemo(() => {\n        presenceChildren.forEach((_, key) => presenceChildren.set(key, false));\n    }, [isPresent]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */\n    React.useEffect(() => {\n        !isPresent &&\n            !presenceChildren.size &&\n            onExitComplete &&\n            onExitComplete();\n    }, [isPresent]);\n    if (mode === \"popLayout\") {\n        children = jsx(PopChild, { isPresent: isPresent, children: children });\n    }\n    return (jsx(PresenceContext.Provider, { value: context, children: children }));\n};\nfunction newChildrenMap() {\n    return new Map();\n}\n\nexport { PresenceChild };\n","import { useEffect } from 'react';\n\nfunction useUnmountEffect(callback) {\n    return useEffect(() => () => callback(), []);\n}\n\nexport { useUnmountEffect };\n","import { jsx, Fragment } from 'react/jsx-runtime';\nimport { useContext, useRef, cloneElement, Children, isValidElement } from 'react';\nimport { useForceUpdate } from '../../utils/use-force-update.mjs';\nimport { useIsMounted } from '../../utils/use-is-mounted.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { useUnmountEffect } from '../../utils/use-unmount-effect.mjs';\nimport { invariant } from '../../utils/errors.mjs';\n\nconst getChildKey = (child) => child.key || \"\";\nfunction updateChildLookup(children, allChildren) {\n    children.forEach((child) => {\n        const key = getChildKey(child);\n        allChildren.set(key, child);\n    });\n}\nfunction onlyElements(children) {\n    const filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, (child) => {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nconst AnimatePresence = ({ children, custom, initial = true, onExitComplete, exitBeforeEnter, presenceAffectsLayout = true, mode = \"sync\", }) => {\n    invariant(!exitBeforeEnter, \"Replace exitBeforeEnter with mode='wait'\");\n    // We want to force a re-render once all exiting animations have finished. We\n    // either use a local forceRender function, or one from a parent context if it exists.\n    const forceRender = useContext(LayoutGroupContext).forceRender || useForceUpdate()[0];\n    const isMounted = useIsMounted();\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n    const filteredChildren = onlyElements(children);\n    let childrenToRender = filteredChildren;\n    const exitingChildren = useRef(new Map()).current;\n    // Keep a living record of the children we're actually rendering so we\n    // can diff to figure out which are entering and exiting\n    const presentChildren = useRef(childrenToRender);\n    // A lookup table to quickly reference components by key\n    const allChildren = useRef(new Map()).current;\n    // If this is the initial component render, just deal with logic surrounding whether\n    // we play onMount animations or not.\n    const isInitialRender = useRef(true);\n    useIsomorphicLayoutEffect(() => {\n        isInitialRender.current = false;\n        updateChildLookup(filteredChildren, allChildren);\n        presentChildren.current = childrenToRender;\n    });\n    useUnmountEffect(() => {\n        isInitialRender.current = true;\n        allChildren.clear();\n        exitingChildren.clear();\n    });\n    if (isInitialRender.current) {\n        return (jsx(Fragment, { children: childrenToRender.map((child) => (jsx(PresenceChild, { isPresent: true, initial: initial ? undefined : false, presenceAffectsLayout: presenceAffectsLayout, mode: mode, children: child }, getChildKey(child)))) }));\n    }\n    // If this is a subsequent render, deal with entering and exiting children\n    childrenToRender = [...childrenToRender];\n    // Diff the keys of the currently-present and target children to update our\n    // exiting list.\n    const presentKeys = presentChildren.current.map(getChildKey);\n    const targetKeys = filteredChildren.map(getChildKey);\n    // Diff the present children with our target children and mark those that are exiting\n    const numPresent = presentKeys.length;\n    for (let i = 0; i < numPresent; i++) {\n        const key = presentKeys[i];\n        if (targetKeys.indexOf(key) === -1 && !exitingChildren.has(key)) {\n            exitingChildren.set(key, undefined);\n        }\n    }\n    // If we currently have exiting children, and we're deferring rendering incoming children\n    // until after all current children have exiting, empty the childrenToRender array\n    if (mode === \"wait\" && exitingChildren.size) {\n        childrenToRender = [];\n    }\n    // Loop through all currently exiting components and clone them to overwrite `animate`\n    // with any `exit` prop they might have defined.\n    exitingChildren.forEach((component, key) => {\n        // If this component is actually entering again, early return\n        if (targetKeys.indexOf(key) !== -1)\n            return;\n        const child = allChildren.get(key);\n        if (!child)\n            return;\n        const insertionIndex = presentKeys.indexOf(key);\n        let exitingComponent = component;\n        if (!exitingComponent) {\n            const onExit = () => {\n                // clean up the exiting children map\n                exitingChildren.delete(key);\n                // compute the keys of children that were rendered once but are no longer present\n                // this could happen in case of too many fast consequent renderings\n                // @link https://github.com/framer/motion/issues/2023\n                const leftOverKeys = Array.from(allChildren.keys()).filter((childKey) => !targetKeys.includes(childKey));\n                // clean up the all children map\n                leftOverKeys.forEach((leftOverKey) => allChildren.delete(leftOverKey));\n                // make sure to render only the children that are actually visible\n                presentChildren.current = filteredChildren.filter((presentChild) => {\n                    const presentChildKey = getChildKey(presentChild);\n                    return (\n                    // filter out the node exiting\n                    presentChildKey === key ||\n                        // filter out the leftover children\n                        leftOverKeys.includes(presentChildKey));\n                });\n                // Defer re-rendering until all exiting children have indeed left\n                if (!exitingChildren.size) {\n                    if (isMounted.current === false)\n                        return;\n                    forceRender();\n                    onExitComplete && onExitComplete();\n                }\n            };\n            exitingComponent = (jsx(PresenceChild, { isPresent: false, onExitComplete: onExit, custom: custom, presenceAffectsLayout: presenceAffectsLayout, mode: mode, children: child }, getChildKey(child)));\n            exitingChildren.set(key, exitingComponent);\n        }\n        childrenToRender.splice(insertionIndex, 0, exitingComponent);\n    });\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\n    // the same tree between renders\n    childrenToRender = childrenToRender.map((child) => {\n        const key = child.key;\n        return exitingChildren.has(key) ? (child) : (jsx(PresenceChild, { isPresent: true, presenceAffectsLayout: presenceAffectsLayout, mode: mode, children: child }, getChildKey(child)));\n    });\n    if (process.env.NODE_ENV !== \"production\" &&\n        mode === \"wait\" &&\n        childrenToRender.length > 1) {\n        console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n    }\n    return (jsx(Fragment, { children: exitingChildren.size\n            ? childrenToRender\n            : childrenToRender.map((child) => cloneElement(child)) }));\n};\n\nexport { AnimatePresence };\n"],"names":["useIsMounted","isMounted","useRef","useIsomorphicLayoutEffect","useForceUpdate","forcedRenderCount","setForcedRenderCount","useState","forceRender","useCallback","frame","PopChildMeasure","React.Component","prevProps","element","size","PopChild","children","isPresent","id","useId","ref","nonce","useContext","MotionConfigContext","useInsertionEffect","width","height","top","left","style","jsx","React.cloneElement","PresenceChild","initial","onExitComplete","custom","presenceAffectsLayout","mode","presenceChildren","useConstant","newChildrenMap","context","useMemo","childId","isComplete","_","key","React.useEffect","PresenceContext","useUnmountEffect","callback","useEffect","getChildKey","child","updateChildLookup","allChildren","onlyElements","filtered","Children","isValidElement","AnimatePresence","exitBeforeEnter","invariant","LayoutGroupContext","filteredChildren","childrenToRender","exitingChildren","presentChildren","isInitialRender","Fragment","presentKeys","targetKeys","numPresent","component","insertionIndex","exitingComponent","onExit","leftOverKeys","childKey","leftOverKey","presentChild","presentChildKey","cloneElement"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5]}