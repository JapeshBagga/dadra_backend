{"version":3,"file":"AIPricingExpired-gp-DTazn.js","sources":["../../src/pages/NewPricing/AIPricingExpired.tsx"],"sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\r\nimport \"./AIPricing.css\";\r\nimport AIPlan1 from \"../../assets/AIPlan1\";\r\nimport AIPlan2 from \"../../assets/AIPlan2\";\r\nimport AIPlan3 from \"../../assets/AIPlan3\";\r\nimport AIPlan4 from \"../../assets/AIPlan4\";\r\nimport { axiosPost } from \"../../services/axiosService\";\r\nimport Plans from \"../../components/layoutElements/plans\";\r\nimport AIAnimateFreePlan from \"../../assets/AIAnimteFreePlan\";\r\nimport AIAnimateBasic from \"../../assets/AIAnimateBasic\";\r\nimport AiAnimatestandard from \"../../assets/AiAnimatestandard\";\r\nimport AiAnimateAdvance from \"../../assets/AiAnimateAdvance\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { userSlice } from \"../../redux/User\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { Crisp } from \"crisp-sdk-web\";\r\n\r\nconst AIPricingExpired = ({ checked, aiPlan, planType, subscriptionId }) => {\r\n  const [buttonClicked, setButtonClicked] = useState(false);\r\n  const location = useLocation();\r\n  const dispatch = useDispatch();\r\n  const queryParam = new URLSearchParams(location.search);\r\n  const [data, setData] = useState([\r\n    {\r\n      image: <AIPlan2 />,\r\n      animate_image: <AIAnimateBasic />,\r\n      title: \"Basic\",\r\n      desc: \"Good superb content for Advanced users  Advanced users\",\r\n      price: \"25\",\r\n      button: \"Upgrade Plan\",\r\n      button2: \"Change Plan\",\r\n      features: [\r\n        \"Create up to 5 bots\",\r\n        \"Send up to 3,000 messages per month\",\r\n        \"Use up to 11M characters for training a bot\",\r\n        \"Train a bot using up to 3,000 links\",\r\n        \"Upload multiple files for bot training\",\r\n        \"Configure Zapier Integration\",\r\n        \"View Conversation History\",\r\n        \"Capture Leads Data\",\r\n      ],\r\n      loading: false,\r\n      planCode: \"basic_01\",\r\n      interval_unit: \"months\",\r\n    },\r\n    {\r\n      image: <AIPlan3 />,\r\n      animate_image: <AiAnimatestandard />,\r\n      title: \"Professional\",\r\n      desc: \"Good superb content for Advanced users  Advanced users\",\r\n      price: \"95\",\r\n      button: \"Upgrade Plan\",\r\n      button2: \"Change Plan\",\r\n      features: [\r\n        \"Create up to 10 bots\",\r\n        \"Send up to 30,000 messages per month\",\r\n        \"Use up to 11M characters for training a bot\",\r\n        \"Train a bot using up to 5,000 links\",\r\n        \"Upload multiple files for bot training\",\r\n        \"Configure Zapier Integration\",\r\n        \"View Conversation History\",\r\n        \"Capture Leads Data\",\r\n        \"Ability to connect your OpenAI API Key\",\r\n        \"Ability to Remove Chatbot Builder Branding\",\r\n      ],\r\n      loading: false,\r\n      planCode: \"standard_01\",\r\n      interval_unit: \"months\",\r\n    },\r\n    {\r\n      image: <AIPlan4 />,\r\n      animate_image: <AiAnimateAdvance />,\r\n      title: \"Enterprise\",\r\n      desc: \"Good superb content for Advanced users  Advanced users\",\r\n      price: \"375\",\r\n      button: \"Upgrade Plan\",\r\n      button2: \"Change Plan\",\r\n      features: [\r\n        \"Personalized SLA\",\r\n        \"Custom limits\",\r\n        \"Team training\",\r\n        \"More messages per month\",\r\n        \"Unlimited bots\",\r\n        \"Unlimited links\",\r\n      ],\r\n      loading: false,\r\n      planCode: \"advanced_01\",\r\n      interval_unit: \"months\",\r\n    },\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    const svgs = [\r\n      \"https://dlvkyia8i4zmz.cloudfront.net/laOOO58rTEqLIunp3y8Q_free_plan_pricing.svg\",\r\n      \"https://dlvkyia8i4zmz.cloudfront.net/xvu3hijDRuqJXkQX0vYS_Basic_plan_pricing.svg\",\r\n      \"https://dlvkyia8i4zmz.cloudfront.net/DvxuWTfbQkhvfzUhTHmd_Standard_plan_pricing.svg\",\r\n      \"https://dlvkyia8i4zmz.cloudfront.net/ln7AutUUT6KMHYqlqeuS_Advanced_plan_pricing.svg\",\r\n    ];\r\n    const main = document.querySelectorAll(\".aiplan-bx\");\r\n    const imgBox = document.querySelectorAll(\".aiplan-ing-bx\");\r\n    const temp: any = [];\r\n    Array.from(imgBox).forEach((ele) => temp.push(ele.innerHTML));\r\n    Array.from(main).forEach((element, index) => {\r\n      element.addEventListener(\"mouseenter\", () => {\r\n        imgBox[\r\n          index\r\n        ].innerHTML = `<object type=\"image/svg+xml\" data=${svgs[index]}><img src=${svgs[index]} alt=\"\" /></object>`;\r\n      });\r\n    });\r\n    const updatedData = data.map((item) => {\r\n      if (checked) {\r\n        return {\r\n          ...item,\r\n          interval_unit: \"years\",\r\n          planCode: `${item.planCode.slice(0, item.planCode.length - 2)}02`,\r\n        };\r\n      } else {\r\n        return {\r\n          ...item,\r\n          interval_unit: \"months\",\r\n          planCode: `${item.planCode.slice(0, item.planCode.length - 2)}01`,\r\n        };\r\n      }\r\n    });\r\n    setData(updatedData);\r\n  }, [checked]);\r\n\r\n  const getPrice = (title) => {\r\n    const plan = data.find((plan) => plan?.title === title);\r\n    if (plan) {\r\n      if (checked) {\r\n        return parseInt(plan?.price) * (checked ? 10 : 1);\r\n      } else {\r\n        return plan?.price;\r\n      }\r\n    }\r\n    return \"\";\r\n  };\r\n\r\n  const selectPlans = (planCode) => {\r\n    // setLoading(true);\r\n    const body = {\r\n      plan_code: planCode,\r\n    };\r\n    axiosPost(`/payments/aihostedPage`, body)\r\n      .then((response) => {\r\n        window.location.assign(response.data.url);\r\n        // setLoading(false);\r\n      })\r\n      .catch((err: any) => {\r\n        console.log(err);\r\n        // setLoading(false);\r\n        dispatch(\r\n          userSlice.actions.setInfoModal({\r\n            showModal: true,\r\n            modalType: \"error\",\r\n            modalTitle: \"Failed!\",\r\n            modalMessage: err.response.data.detailedMessage,\r\n          })\r\n        );\r\n      });\r\n  };\r\n\r\n  const handlePlan = () => {\r\n    Crisp.chat.open();\r\n    Crisp.message.send(\"text\", \"We'll get back to you shortly\");\r\n  };\r\n\r\n  //   const selectedPlan = (planCode, title, price, type) => {\r\n  //     console.log(planCode, title, price, type,aiPlan)\r\n  //     const body = {\r\n  //       plan_code: planCode,\r\n  //       subscriptionId\r\n  //     };\r\n  //     let unit = aiPlan.plan_code.charAt(aiPlan.plan_code.length - 1);\r\n  //     console.log(unit)\r\n  //     if (checked) {\r\n  //       if ((aiPlan.price >= price && unit == type)) {\r\n  //         axiosPost(`/payments/downgrade`, body)\r\n  //           .then((response) => {\r\n  //             if (response.data.success) {\r\n  //               setButtonClicked(false);\r\n  //               const updatedData = data.map((item) => {\r\n  //                 if (item.title === title) {\r\n  //                   return { ...item, loading: false };\r\n  //                 }\r\n  //                 return item;\r\n  //               });\r\n  //               setData(updatedData);\r\n  //               dispatch(\r\n  //                 userSlice.actions.setInfoModal({\r\n  //                   showModal: true,\r\n  //                   modalType: \"success\",\r\n  //                   modalTitle: \"Success\",\r\n  //                   modalMessage: \"Your plan downgrade has been scheduled, and the changes will only take effect upon renewal.\",\r\n  //                 })\r\n  //               )\r\n\r\n  //             }\r\n  //           })\r\n  //           .catch((err) => {\r\n  //             console.log(err);\r\n  //             dispatch(\r\n  //               userSlice.actions.setToastPopUp({\r\n  //                 show: true,\r\n  //                 toastType: \"error\",\r\n  //                 message: `Something went wrong`,\r\n  //               })\r\n  //             );\r\n  //           })\r\n  //           .finally(() => {\r\n  //             setTimeout(() => {\r\n  //               setButtonClicked(false);\r\n  //               const updatedData = data.map((item) => {\r\n  //                 if (item.title === title) {\r\n  //                   return { ...item, loading: false };\r\n  //                 }\r\n  //                 return item;\r\n  //               });\r\n  //               setData(updatedData);\r\n  //             }, 1000);\r\n  //           });\r\n\r\n  //       } else {\r\n  //         axiosPost(`/payments/aihostedPage`, body)\r\n  //           .then((response) => {\r\n  //             window.location.assign(response.data.url);\r\n\r\n  //           })\r\n  //           .catch((err) => {\r\n  //             console.log(err);\r\n  //             dispatch(\r\n  //               userSlice.actions.setToastPopUp({\r\n  //                 show: true,\r\n  //                 toastType: \"error\",\r\n  //                 message: `Something went wrong`,\r\n  //               })\r\n  //             );\r\n  //           })\r\n  //           .finally(() => {\r\n  //             setTimeout(() => {\r\n  //               setButtonClicked(false);\r\n  //               const updatedData = data.map((item) => {\r\n  //                 if (item.title === title) {\r\n  //                   return { ...item, loading: false };\r\n  //                 }\r\n  //                 return item;\r\n  //               });\r\n  //               setData(updatedData);\r\n  //             }, 1000);\r\n  //           });\r\n  //       }\r\n  //     } else {\r\n  //       if ((aiPlan.price >= price || (unit != type && aiPlan.plan_code !== 'trial_02'))) {\r\n  //         axiosPost(`/payments/downgrade`, body)\r\n  //           .then((response) => {\r\n  //             if (response.data.success) {\r\n  //               setButtonClicked(false);\r\n  //               const updatedData = data.map((item) => {\r\n  //                 if (item.title === title) {\r\n  //                   return { ...item, loading: false };\r\n  //                 }\r\n  //                 return item;\r\n  //               });\r\n  //               setData(updatedData);\r\n  //               dispatch(\r\n  //                 userSlice.actions.setInfoModal({\r\n  //                   showModal: true,\r\n  //                   modalType: \"success\",\r\n  //                   modalTitle: \"Success\",\r\n  //                   modalMessage: \"Your plan downgrade has been scheduled, and the changes will only take effect upon renewal.\",\r\n  //                 })\r\n  //               )\r\n\r\n  //             }\r\n  //           })\r\n  //           .catch((err) => {\r\n  //             console.log(err);\r\n  //             dispatch(\r\n  //               userSlice.actions.setToastPopUp({\r\n  //                 show: true,\r\n  //                 toastType: \"error\",\r\n  //                 message: `Something went wrong`,\r\n  //               })\r\n  //             );\r\n  //           })\r\n  //           .finally(() => {\r\n  //             setTimeout(() => {\r\n  //               setButtonClicked(false);\r\n  //               const updatedData = data.map((item) => {\r\n  //                 if (item.title === title) {\r\n  //                   return { ...item, loading: false };\r\n  //                 }\r\n  //                 return item;\r\n  //               });\r\n  //               setData(updatedData);\r\n\r\n  //             }, 1000);\r\n  //           });\r\n\r\n  //       } else {\r\n  //         axiosPost(`/payments/aihostedPage`, body)\r\n  //           .then((response) => {\r\n  //             window.location.assign(response.data.url);\r\n\r\n  //           })\r\n  //           .catch((err) => {\r\n  //             console.log(err);\r\n  //             dispatch(\r\n  //               userSlice.actions.setToastPopUp({\r\n  //                 show: true,\r\n  //                 toastType: \"error\",\r\n  //                 message: `Something went wrong`,\r\n  //               })\r\n  //             );\r\n  //           })\r\n  //           .finally(() => {\r\n  //             setTimeout(() => {\r\n  //               setButtonClicked(false);\r\n  //               const updatedData = data.map((item) => {\r\n  //                 if (item.title === title) {\r\n  //                   return { ...item, loading: false };\r\n  //                 }\r\n  //                 return item;\r\n  //               });\r\n  //               setData(updatedData);\r\n  //             }, 1000);\r\n  //           });\r\n  //       }\r\n  //     }\r\n\r\n  //   };\r\n\r\n  const handleUpgrade = (title) => {\r\n    setButtonClicked(true);\r\n    const plan = data.find((plan) => plan?.title === title);\r\n\r\n    if (plan) {\r\n      const updatedData = data.map((item) => {\r\n        if (item.title === title) {\r\n          return { ...item, loading: true };\r\n        }\r\n        return item;\r\n      });\r\n      setData(updatedData);\r\n      if (title === \"Basic\") {\r\n        if (checked) {\r\n          selectPlans(\"basic_02\");\r\n        } else {\r\n          selectPlans(\"basic_01\");\r\n        }\r\n      } else if (title === \"Professional\") {\r\n        if (checked) {\r\n          selectPlans(\"standard_02\");\r\n        } else {\r\n          selectPlans(\"standard_01\");\r\n        }\r\n      } else if (title === \"Enterprise\") {\r\n        if (checked) {\r\n          selectPlans(\"advanced_02\");\r\n        } else {\r\n          selectPlans(\"advanced_01\");\r\n        }\r\n      } else if (title === \"Free\") {\r\n        selectPlans(\"free_01\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const handleMouseEnter = () => {\r\n    setIsHovered(true);\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setIsHovered(false);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div\r\n        className=\"ai-plan-flex w-100\"\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n      >\r\n        {data.map((plan, i) => (\r\n          <div\r\n            className={`aiplan-bx ${\r\n              aiPlan?.plan_code === plan?.planCode ||\r\n              (aiPlan?.plan_code === \"trial_01\" &&\r\n                plan?.planCode === \"basic_01\") ||\r\n              (aiPlan?.plan_code === \"trial_02\" &&\r\n                plan?.planCode === \"basic_01\")\r\n                ? \"active-aiplan\"\r\n                : \"\"\r\n            }`}\r\n            key={i}\r\n          >\r\n            <div className=\"aiplan-ing-bx\">{plan?.image}</div>\r\n            <div className=\"aiplan-content-bx\">\r\n              <h2 className=\"mb-20\">\r\n                {plan?.title}\r\n\r\n                {(aiPlan?.trial || aiPlan?.name === \"Free\") &&\r\n                  plan?.title === \"Professional\" && (\r\n                    <span className=\"ai-recommend\">Recommended</span>\r\n                  )}\r\n\r\n                {(aiPlan?.plan_code === plan?.planCode ||\r\n                  (aiPlan?.plan_code === \"trial_01\" &&\r\n                    plan?.planCode === \"basic_01\") ||\r\n                  (aiPlan?.plan_code === \"trial_02\" &&\r\n                    plan?.planCode === \"basic_01\")) &&\r\n                  aiPlan?.trial && (\r\n                    <div className=\"nw-plan-img-bx\">\r\n                      <div className=\"current-pln pln-green pln-position\">\r\n                        Trial Plan\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n              </h2>\r\n\r\n              <div className=\"ai-plan-price fx jst-sp-bt\">\r\n                {plan.title === \"Enterprise\" ? (\r\n                  <span>Custom </span>\r\n                ) : (\r\n                  <>\r\n                    <span>${getPrice(plan?.title)}</span> per{\" \"}\r\n                    {checked ? \"year\" : \"month\"}\r\n                  </>\r\n                )}\r\n              </div>\r\n\r\n              {((checked &&\r\n                plan?.title === aiPlan?.name?.trim() &&\r\n                (planType === \"years\" || plan?.title === \"Free\") &&\r\n                !aiPlan?.trial) ||\r\n                (!checked &&\r\n                  plan?.title === aiPlan?.name?.trim() &&\r\n                  planType === \"months\" &&\r\n                  !aiPlan?.trial)) && (\r\n                <button\r\n                  disabled={\r\n                    plan?.loading ||\r\n                    (plan?.planCode === aiPlan?.plan_code && !aiPlan?.trial) ||\r\n                    plan?.title?.trim() == \"Free\" ||\r\n                    buttonClicked\r\n                  }\r\n                >\r\n                  Current Plan\r\n                </button>\r\n              )}\r\n\r\n              {!(\r\n                !checked &&\r\n                plan?.title === aiPlan?.name?.trim() &&\r\n                (planType === \"months\" || plan?.title === \"Free\") &&\r\n                !aiPlan?.trial\r\n              ) &&\r\n                !(\r\n                  checked &&\r\n                  plan?.title === aiPlan?.name?.trim() &&\r\n                  (planType === \"years\" || plan?.title === \"Free\") &&\r\n                  !aiPlan?.trial\r\n                ) &&\r\n                plan.title !== \"Enterprise\" && (\r\n                  <Fragment>\r\n                    {checked ? (\r\n                      <button\r\n                        onClick={() => handleUpgrade(plan?.title)}\r\n                        disabled={\r\n                          plan?.loading ||\r\n                          (plan?.planCode === aiPlan?.plan_code &&\r\n                            !aiPlan?.trial) ||\r\n                          plan?.title?.trim() == \"Free\" ||\r\n                          buttonClicked\r\n                        }\r\n                      >\r\n                        {plan?.loading ? \"Upgrading...\" : plan?.button}\r\n                      </button>\r\n                    ) : (\r\n                      <button\r\n                        onClick={() => handleUpgrade(plan?.title)}\r\n                        disabled={\r\n                          plan?.loading ||\r\n                          (plan?.planCode === aiPlan?.plan_code &&\r\n                            !aiPlan?.trial) ||\r\n                          plan?.title?.trim() == \"Free\" ||\r\n                          buttonClicked\r\n                        }\r\n                      >\r\n                        {plan?.loading ? \"Upgrading...\" : plan?.button}\r\n                      </button>\r\n                    )}\r\n                  </Fragment>\r\n                )}\r\n              {plan.title === \"Enterprise\" && (\r\n                <button onClick={handlePlan}>Contact us</button>\r\n              )}\r\n\r\n              <ul>\r\n                {plan?.title === \"Enterprise\" ? (\r\n                  <span>Looking For: </span>\r\n                ) : (\r\n                  <span>Features</span>\r\n                )}\r\n                {/* <span>Features</span> */}\r\n                {plan?.features.map((feature: any, index) => (\r\n                  <li key={index}>\r\n                    <span> {feature}</span>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default AIPricingExpired;\r\n"],"names":["AIPricingExpired","checked","aiPlan","planType","subscriptionId","buttonClicked","setButtonClicked","useState","location","useLocation","dispatch","useDispatch","data","setData","AIPlan2","this","AIAnimateBasic","AIPlan3","AiAnimatestandard","AIPlan4","AiAnimateAdvance","useEffect","svgs","main","imgBox","temp","ele","element","index","updatedData","item","getPrice","title","plan","selectPlans","planCode","axiosPost","response","err","userSlice","handlePlan","Crisp","handleUpgrade","isHovered","setIsHovered","handleMouseEnter","handleMouseLeave","jsxDEV","Fragment","i","_a","_b","_c","_d","_e","_f","_g","feature"],"mappings":"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"}